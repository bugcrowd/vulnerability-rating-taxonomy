#!/usr/bin/env python
import json
import sys
import subprocess

def get_json(filename):
    '''
    Returns deserialized JSON if the input file is a valid JSON
    or exits with an error otherwise
    '''
    try:
        return json.loads(open(filename).read())
    except ValueError as e:
        print('Error: Not a valid JSON file:', filename)
        sys.exit(e)

def parse_tags():
    p = subprocess.Popen('git tag', shell=True, stdout=subprocess.PIPE)
    out, err = p.communicate()
    return out.split('\n')

def is_tag(version):
    tags = parse_tags()
    try:
        tags.index(version)
        return True
    except ValueError as e:
        return False

def load_version(version):
    command = 'git show v%s:vulnerability-rating-taxonomy.json' % version
    p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    out, err = p.communicate()
    return json.loads(out)

def dig_tree(version_json, id_list):
    if len(id_list) == 1:
        return [node for node in version_json if node.get('id')==id_list[0]][0]
    return dig_tree(
        [node for node in version_json if node.get('id')==id_list[0]][0]['children'],
        id_list[1:]
    )

def check_entry(version_json, id_list):
    try:
        dig_tree(version_json['content'], id_list)
        return True
    except (KeyError, IndexError) as e:
        return False

def main():
    '''
    Validates that the entries in the deprecated-node-mapping existing
    in their given versions
    '''
    errors = []
    deprecated_json = get_json('deprecated-node-mapping.json')
    vrt_json = get_json('vulnerability-rating-taxonomy.json')

    for deprecated_node in deprecated_json:
        versions = deprecated_json[deprecated_node].keys()
        for version in versions:
            if is_tag(version):
                version_json = load_version(version)
            else:
                version_json = vrt_json
            mapped_id = deprecated_json[deprecated_node][version]
            id_list = mapped_id.split('.')
            has_entry = check_entry(version_json, id_list)
            if not has_entry:
                errors.append({
                    'missing_node': deprecated_json[deprecated_node][version],
                    'version': version
                })
    if errors:
        sys.exit(errors)
    else:
        print 'All Good!'
        return True

if __name__ == '__main__':
    main()
