#!/usr/bin/env python
import sys
import git
import json

def is_tag(repo, version):
    tags = list(tag.name for tag in repo.tags)
    try:
        tags.index('v%s' % version)
        return True
    except ValueError as e:
        return False

def load_version(repo, version, filename):
    content = repo.git.show('%s:%s' % (version, filename))
    return json.loads(content)

def dig_tree(version_json, id_list):
    if len(id_list) == 1:
        return [node for node in version_json if node.get('id') == id_list[0]][0]
    return dig_tree(
        [node for node in version_json if node.get('id') == id_list[0]][0]['children'],
        id_list[1:]
    )

def check_entry(version_json, id_list):
    try:
        dig_tree(version_json['content'], id_list)
        return True
    except (KeyError, IndexError) as e:
        return False

def main():
    '''
    Validates that the entries in the deprecated-node-mapping existing
    in their given versions
    '''
    errors = []
    repo = git.Repo()
    vrt_filename = 'vulnerability-rating-taxonomy.json'

    vrt_json = json.loads(open(vrt_filename).read())
    deprecated_json = json.loads(open('deprecated-node-mapping.json').read())

    for deprecated_node in deprecated_json:
        versions = deprecated_json[deprecated_node].keys()
        for version in versions:
            if is_tag(repo, version):
                version_json = load_version(repo, 'v%s' % version, vrt_filename)
            else:
                version_json = vrt_json
            mapped_id = deprecated_json[deprecated_node][version]
            has_entry = check_entry(version_json, mapped_id.split('.'))
            if not has_entry:
                errors.append({
                    'missing_node': deprecated_json[deprecated_node][version],
                    'version': version
                })
    if errors:
        sys.exit(errors)
    else:
        print 'All Good!'
        return True

if __name__ == '__main__':
    main()
