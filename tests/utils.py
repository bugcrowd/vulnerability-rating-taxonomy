import json
import git


VRT_FILENAME = "vulnerability-rating-taxonomy.json"
DEPRECATED_MAPPING_FILENAME = "deprecated-node-mapping.json"
CVSS_V3_MAPPING_FILENAME = "mappings/cvss_v3.json"
VRT_SCHEMA_FILENAME = "vrt.schema.json"
CVSS_V3_SCHEMA_FILENAME = "mappings/cvss_v3.schema.json"


def get_json(filename):
    """
    Returns deserialized JSON if the input file is a valid JSON
    or exits with an error otherwise
    """
    try:
        with open(filename) as f:
            return json.loads(f.read())
    except ValueError as e:
        raise Exception('Error: Not a valid JSON file:', filename)


def all_versions(filename):
    repo = git.Repo()
    versions = {
        'current': get_json(filename)
    }
    for tag in repo.tags:
        version_dict = repo.git.show('%s:%s' % (tag.name, filename))
        versions[tag.name.strip('v')] = json.loads(version_dict)
    return versions


def id_valid(vrt, id_list):
    # be robust to whether the whole vrt or just the content is passed in
    if 'content' in vrt:
        return id_valid(vrt['content'], id_list)

    def _id_valid(keyed_vrt, id_list):
        if 'children' in keyed_vrt:
            return _id_valid(keyed_vrt['children'], id_list)
        elif id_list[0] in keyed_vrt:
            if len(id_list) == 1:
                return True
            else:
                return _id_valid(keyed_vrt[id_list[0]], id_list[1:])
        else:
            return False

    return _id_valid(key_by_id(vrt), id_list)


def has_mapping(mapping, id_list, key):
    if key in mapping:
        return True
    elif 'children' in mapping:
        return has_mapping(mapping['children'], id_list, key)
    elif len(id_list) > 0 and id_list[0] in mapping:
        return has_mapping(mapping[id_list[0]], id_list[1:], key)
    else:
        return False


def key_by_id(mapping):
    if isinstance(mapping, list):
        return {x['id']: key_by_id(x) for x in mapping}
    elif isinstance(mapping, dict):
        return {k: key_by_id(v) for k, v in mapping.iteritems()}
    else:
        return mapping


def validate_all_vrt_ids_have_mapping(vrt, mapping, key):
    keyed_mapping = key_by_id(mapping['content'])

    def validate_vrt_has_mapping(vrt_list, parent_ids):
        for entry in vrt_list:
            ids = parent_ids + [entry['id']]
            if 'children' in entry:
                validate_vrt_has_mapping(entry['children'], ids)
            else:
                if not has_mapping(keyed_mapping, ids, key):
                    raise Exception('missing %s mapping for %s' % (key, '.'.join(ids)))

    validate_vrt_has_mapping(vrt['content'], [])


def all_id_lists(vrt_tree):
    def all_ids(vrt, prefix):
        if isinstance(vrt, list):
            return [vrt_id for entry in vrt for vrt_id in all_ids(entry, prefix)]
        elif isinstance(vrt, dict):
            if 'children' in vrt:
                return [prefix + [vrt['id']]] + all_ids(vrt['children'], prefix + [vrt['id']])
            else:
                return [prefix + [vrt['id']]]
        else:
            print(vrt)
            raise Exception('unexpected entry found')
    return all_ids(vrt_tree['content'], [])
