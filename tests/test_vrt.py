import utils
import unittest
import subprocess
import os
import jsonschema


class TestVrt(unittest.TestCase):
    @unittest.skipIf(os.getenv('BUILDKITE'), 'skip changelog update requirement in buildkite')
    def test_changelog_updated(self):
        """
        Checks if CHANGELOG.md is being updated with the current commit
        and prompts the user if it isn't
        """
        p = subprocess.Popen("git diff HEAD --stat --staged CHANGELOG.md | wc -l", shell=True, stdout=subprocess.PIPE)
        out, err = p.communicate()
        self.assertGreater(int(out), 0, 'CHANGELOG.md not updated')

    def validate_schema(self, schema_file, data_file):
        schema = utils.get_json(schema_file)
        data = utils.get_json(data_file)
        jsonschema.validate(data, schema)

    def test_vrt_schema(self):
        self.validate_schema(utils.VRT_SCHEMA_FILENAME, utils.VRT_FILENAME)

    def test_cvss_v3_schema(self):
        self.validate_schema(utils.CVSS_V3_SCHEMA_FILENAME, utils.CVSS_V3_MAPPING_FILENAME)

    def test_all_vrt_ids_have_mapping(self):
        vrt = utils.get_json(utils.VRT_FILENAME)
        mapping = utils.get_json(utils.CVSS_V3_MAPPING_FILENAME)
        utils.validate_all_vrt_ids_have_mapping(vrt, mapping, 'cvss_v3')

    def test_only_map_valid_ids(self):
        vrt_ids = utils.all_id_lists(utils.get_json(utils.VRT_FILENAME))
        mapping_ids = utils.all_id_lists(utils.get_json(utils.CVSS_V3_MAPPING_FILENAME))
        for id_list in mapping_ids:
            self.assertIn(id_list, vrt_ids)


if __name__ == "__main__":
    unittest.main()
