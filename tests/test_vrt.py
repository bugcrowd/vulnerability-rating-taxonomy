import utils
import unittest
import subprocess
import jsonschema


class TestVrt(unittest.TestCase):
    @unittest.skip('need to decide the best way to handle this')
    def test_changelog_updated(self):
        """
        Checks if CHANGELOG.md is being updated with the current commit
        and prompts the user if it isn't
        """
        p = subprocess.Popen('git diff HEAD --stat --staged CHANGELOG.md | wc -l', shell=True, stdout=subprocess.PIPE)
        out, err = p.communicate()
        self.assertGreater(int(out), 0, 'CHANGELOG.md not updated')

    def validate_schema(self, schema_file, data_file):
        schema = utils.get_json(schema_file)
        data = utils.get_json(data_file)
        jsonschema.Draft4Validator.check_schema(schema)
        error = jsonschema.exceptions.best_match(jsonschema.Draft4Validator(schema).iter_errors(data))
        if error:
            raise error

    def test_vrt_schema(self):
        self.validate_schema(utils.VRT_SCHEMA_FILENAME, utils.VRT_FILENAME)

    def test_cvss_v3_schema(self):
        self.validate_schema(utils.CVSS_V3_SCHEMA_FILENAME, utils.CVSS_V3_MAPPING_FILENAME)

    def test_cwe_schema(self):
        self.validate_schema(utils.CWE_SCHEMA_FILENAME, utils.CWE_MAPPING_FILENAME)

    def test_all_vrt_ids_have_mapping(self):
        vrt = utils.get_json(utils.VRT_FILENAME)
        mappings = {}
        mappings["cvss_v3"] = utils.get_json(utils.CVSS_V3_MAPPING_FILENAME)
        mappings["cwe"] = utils.get_json(utils.CWE_MAPPING_FILENAME)
        for key, mapping in mappings.iteritems():
            keyed_mapping = utils.key_by_id(mapping['content'])
            for vrt_id_list in utils.all_id_lists(vrt, include_internal=False):
                self.assertTrue(utils.has_mapping(keyed_mapping, vrt_id_list, key),
                                'no ' + key + ' mapping for ' + '.'.join(vrt_id_list))

    def test_only_map_valid_ids(self):
        vrt_ids = utils.all_id_lists(utils.get_json(utils.VRT_FILENAME))
        mappings = []
        mappings.insert(0, utils.all_id_lists(utils.get_json(utils.CVSS_V3_MAPPING_FILENAME)))
        mappings.insert(1, utils.all_id_lists(utils.get_json(utils.CWE_MAPPING_FILENAME)))
        for mapping_ids in mappings:
            for id_list in mapping_ids:
                self.assertIn(id_list, vrt_ids, 'invalid id in mapping file ' + '.'.join(id_list))


if __name__ == '__main__':
    unittest.main()
